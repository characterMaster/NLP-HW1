# Symbols in the grammar are case-sensitive.
# 
# This grammar uses a convention that
#    - terminals are usually lowercase  (president)
#    - preterminals are capitalized     (Noun)
#    - other nonterminals are all-caps  (NP)
# 
# This convention just makes grammars more readable to humans.  Thus:
#
#    - When *you* are writing grammars in questions 3 and 6, you should 
#      follow this convention unless you have a good reason not to.  
#
#    - But your *program* should still work with grammars that don't
#      follow this convention.  So how can your program reliably tell
#      the difference between terminal and nonterminal symbols?  If
#      there is at least one rule for rewriting a symbol, then that
#      symbol is a nonterminal and should be rewritten.
#######################

# Rules for creating full sentences.

6	ROOT	S .
2	ROOT	S !
2   ROOT	is it true that S ?     # mixing terminals and nonterminals is ok.

# The basic grammar rules.  Here's what the abbreviations stand for:
#    S  = sentence
#    NP = noun phrase
#    VP = verb phrase
#    PP = prepositional phrase
#    Det = determiner (sometimes called "article")
#    Prep = preposition
#    Adj = adjective
#    Adv = adverbs
#    V_i = intransitive verbs
#    V_t = transitive verbs
#    V_tp = passive verbs
#    V_clausal = clausal verbs
#    Conj = conjunctions
#    S' = clause
#    Nbar = beginning with nouns, modifiers are stacked hierarchically
#    AdjP = Adjective phrase
#    V_np_sbar = Verbs requiring NP + Clause
#    Auxpass = auxiliary verb (constructs tense and voice)

1   S   NP VP
1   S   NP V_i
1   S   NP V_t NP
1   S   NP V_clausal S'
1   S   NP VP Conj VP   # predicate coordination
1   S   NP Conj NP VP   # subject coordination 
1   S   S' V_t NP       # clausal subject
1   S   NP V_np_sbar NP S'  # e.g., it perplexed NP that S

# Clause
1   S'    that S

# VP
1   VP    V_t NP
1   VP    V_t NP PP
1   VP    Auxpass V_tp NP
1   VP    V_i
1   VP    V_i PP
0.5   VP    V_clausal S'
0.5   VP    VP Conj VP
1   VP    V_t Conj V_t NP   # eg. 'wanted and ate a sandwich'

# Noun Phrases
1   NP    Det Nbar
1   NP    Name
0.3   NP    NP PP
0.3   NP    S'
0.3   NP    NP Conj NP   # NP coordination
1   NP    Pron         # pronoun 'it'

1   Nbar    Noun
0.3   Nbar    AdjP Nbar
0.3   Nbar    Nbar PP

# Adjective phrase
1   AdjP    Adj
0.3   AdjP    Adv AdjP

# Prepositional phrase
1   PP    Prep NP    

# (c) Relative clauses. (Repetition rules are no longer written.)
# Let any NP be modified by a relative clause
# Absence mechanism: the subject is absent and the object is absent
# RelClause = relative clauses
# RelPron = relative pronoun
# Comp = subordinating conjunction
# S_rel = Omission clause
# VP_gap = A VP without an object
1   NP    NP    RelClause

# relative clause
1   RelClause   Comp S_rel
1   RelClause   RelPron S_rel
1   RelClause   V_tp NP

# Omissing clauses (subject missing/object missing)
1   S_rel    VP
1   S_rel    NP VP_gap

# Transitive verbs but without objects
1   VP_gap    Vt
# Allow prepositional phrases to continue to expand to the right (e.g. ate with Sally)
0.3    VP_gap    Vt PP

# Nesting "that + clause" (e.g.thought that Sally ate _ )
1    VP_relcomp    V_clausal Comp S_rel
1    S_rel    NP VP_relcomp

# (g) Appositives (Containing commas)
# Appos allows: NP/RelClause/AgePhrase, etc., which can be stacked in multiple layers
# Comma = commas
# Appos = appositives
# AgePhrase = canned rules

1   NP    NP Comma Appos Comma

# Appositives with different types
1   Appos    NP
1   Appos    RelClause
1   Appos    AgePhrase

# AgePhrase
1   AgePhrase    Num years old

# Vocabulary.  Your program can see that "ate" is a terminal
# symbol because there exists no rule for rewriting it.
# Any symbol that can rewrite as a terminal (or a string of 
# terminals, like "chief of staff") is called a "preterminal."  Notice 
# that a preterminal is a special kind of nonterminal.

# relative words
1   RelPron    who
1   RelPron    which
1   Comp    that

# commas
1   Comma    ,

# A simple age phrase
1   Num    59
1   Noun   years

1   Auxpass is
1   Auxpass was
1   Auxpass are
1   Auxpass were

1   V_t    ate
1	V_t    wanted
1	V_t    kissed
1	V_t	   understood
1	V_t    pickled

1   V_tp    eaten by
1	V_tp    wanted by
1	V_tp    kissed by
1	V_tp	pickled by
1	V_tp	understood by

1   V_i    sighed
1   V_i    worked

1   V_clausal    thought
1   V_clausal    believed
1   V_clausal    said

1   V_np_sbar    perplexed 

3	Det	the
3	Det	a
1	Det	every

1	Noun	president
1	Noun	sandwich
1	Noun	pickle
1	Noun	chief of staff
1	Noun	floor
1	Noun	proposal
1	Noun	desk

1	Adj	   fine
1	Adj	   delicious
1	Adj	   perplexed
1	Adj    pickled

1   Adv    very     

3	Prep	with
3	Prep	on
1	Prep	under
3   Prep    in

1   Name    Sally 

1   Conj    and

1   Pron    it


